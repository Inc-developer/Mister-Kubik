from Addons.config import TELEGRAM_TOKEN, YANDEX_TOKEN, YANDEX_CARD
from Addons.database import Database
from Addons.bot_keyboards import *
from aiogram import Bot, Dispatcher, F
from aiogram.enums import DiceEmoji
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from yoomoney import Client, Quickpay
from uuid import uuid4

import asyncio
import logging


database = Database()
client = Client(YANDEX_TOKEN)

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()

class MoneyAmount(StatesGroup):
    amount = State()

class MoneyWithdraw(StatesGroup):
    amount = State()
    w_adress = State()

class GetRoomNumberDel(StatesGroup):
    game_id = State()

class GetRoomNumberJoin(StatesGroup):
    game_id = State()

class CreateGame(StatesGroup):
    game_id = State()
    bet_amount = State()

class ChooseNumber(StatesGroup):
    chosen_number = State()


@dp.message(CommandStart())
async def cmd_start(message: Message):
    user_id = message.from_user.id
    if database.user_exists(user_id) == False:
        database.add_user(user_id)
    await message.answer('* –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∞–º—É—é –ª—É—á—à—É—é –≤–µ—Ä—Å–∏—é –∫—É–±–æ–≤ –≤–æ –≤—Å–µ–º —Å–Ω–≥ * \
                         \n\n* 1. –ò–≥—Ä–∞ –¥–ª–∏—Ç—Å—è –ø–æ–∫–∞ –æ–¥–∏–Ω –∏–∑ –∏–≥—Ä–æ–∫–æ–≤ –Ω–µ –Ω–∞–±–µ—Ä–µ—Ç 2 –æ—á–∫–∞. *\
                         \n\n* 2. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∏–≥—Ä—ã - 10 —Ä—É–±–ª–µ–π. * \
                         \n\n* 3. –í—Ä–µ–º—è –Ω–∞ —Ö–æ–¥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞ - 30 —Å–µ–∫—É–Ω–¥, –ø–æ—Å–ª–µ —á–µ–≥–æ –∏–≥—Ä–æ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç. * \
                         \n\n* 4. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–≥–∞–¥–∞—Ç—å —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã–ø–∞–¥–µ—Ç –Ω–∞ –∫–æ—Å—Ç–∏. * \
                         \n\n* 5. –ö–æ–º–∏—Å—Å–∏—è –æ—Ç –≤—ã–∏–≥—Ä—ã—à–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç - 10% \
                         \n\n* –£–¥–∞—á–Ω–æ–π –∏–≥—Ä—ã! *', reply_markup=main_kb)


@dp.message(F.text == '‚ùó–ü—Ä–∞–≤–∏–ª–∞')
async def rules(message: Message):
    await message.reply('* –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∞–º—É—é –ª—É—á—à—É—é –≤–µ—Ä—Å–∏—é –∫—É–±–æ–≤ –≤–æ –≤—Å–µ–º —Å–Ω–≥ * \
                         \n\n* 1. –ò–≥—Ä–∞ –¥–ª–∏—Ç—Å—è –ø–æ–∫–∞ –æ–¥–∏–Ω –∏–∑ –∏–≥—Ä–æ–∫–æ–≤ –Ω–µ –Ω–∞–±–µ—Ä–µ—Ç 2 –æ—á–∫–∞. *\
                         \n\n* 2. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∏–≥—Ä—ã - 10 —Ä—É–±–ª–µ–π. * \
                         \n\n* 3. –í—Ä–µ–º—è –Ω–∞ —Ö–æ–¥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞ - 30 —Å–µ–∫—É–Ω–¥, –ø–æ—Å–ª–µ —á–µ–≥–æ –∏–≥—Ä–æ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç. * \
                         \n\n* 4. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–≥–∞–¥–∞—Ç—å —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã–ø–∞–¥–µ—Ç –Ω–∞ –∫–æ—Å—Ç–∏. * \
                         \n\n* 5. –ö–æ–º–∏—Å—Å–∏—è –æ—Ç –≤—ã–∏–≥—Ä—ã—à–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç - 10% \
                         \n\n* –£–¥–∞—á–Ω–æ–π –∏–≥—Ä—ã! *', reply_markup=main_kb)
    

@dp.message(F.text == '‚öôÔ∏è –ü—Ä–æ—Ñ–∏–ª—å')
async def show_profile(message: Message):
    user_id = message.from_user.id
    if database.user_exists(user_id) == False:
        database.add_user(user_id)
    await message.reply(f'* –í–∞—à –±–∞–ª–∞–Ω—Å: {database.check_balance(user_id)} —Ä—É–± *', reply_markup=profile_kb)


@dp.message(F.text == 'üé≤ –ò–≥—Ä–∞—Ç—å')
async def game_button(message: Message):
    user_id = message.from_user.id
    if database.user_exists(user_id) == False:
        database.add_user(user_id)
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=game_kb)


@dp.callback_query(F.data == 'show_games')
async def show_games(callback: CallbackQuery):
    user_id = callback.from_user.id
    await callback.answer('–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫')
    await callback.message.edit_text(database.game_get(user_id), reply_markup=game_kb)

@dp.callback_query(F.data == 'game_delete')
async def game_delete_first(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    await callback.answer('–û–∂–∏–¥–∞–π—Ç–µ')
    await state.set_state(GetRoomNumberDel.game_id)
    await bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã ->")


@dp.message(GetRoomNumberDel.game_id)
async def game_delete_main(message: Message, state: FSMContext):
    user_id = message.from_user.id
    await state.update_data(game_id=message.text)
    data = await state.get_data()
    if database.game_exists(data["game_id"]) == True and database.game_status(data["game_id"]) == 1:
        await state.clear()
        return await bot.send_message(user_id, database.game_delete(user_id, data["game_id"]))
    else:
        await state.clear()
        return await bot.send_message(user_id, "–¢–∞–∫–æ–π –∫–æ–º–Ω–∞—Ç—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏–≥—Ä—ã")


@dp.callback_query(F.data == 'game_join')
async def game_join_first(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    await callback.answer('–û–∂–∏–¥–∞–π—Ç–µ')
    await state.set_state(GetRoomNumberJoin.game_id)
    await bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã ->")


async def start_timer(user_id):
    global is_running
    is_running = True
    n = 30
    while is_running:
        n -= 1
        await asyncio.sleep(1)
        if n == 0:
            game_id = database.get_game_id(user_id)
            game_bet = database.check_game_bet_amount(game_id)
            is_running = False
            if database.check_which_num_user(user_id) == "first_user_id":
                second_user_id = database.check_second_user_id(game_id)
                await bot.send_message(user_id, "üî¥–í—Ä–µ–º—è –Ω–∞ —Ö–æ–¥ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏üî¥")
                await bot.send_message(second_user_id,"üçÄ–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏, —É –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å –≤—Ä–µ–º—è –Ω–∞ —Ö–æ–¥üçÄ")
                database.user_won(second_user_id, game_bet)
                database.user_lose(user_id, game_bet)
                database.game_done(second_user_id, user_id, second_user_id, game_bet)
                database.game_done_del(game_id)
                return is_running
            if database.check_which_num_user(user_id) == "second_user_id":
                first_user_id = database.check_first_user_id(game_id)
                await bot.send_message(user_id, "üî¥–í—Ä–µ–º—è –Ω–∞ —Ö–æ–¥ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏üî¥")
                await bot.send_message(first_user_id,"üçÄ–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏, —É –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å –≤—Ä–µ–º—è –Ω–∞ —Ö–æ–¥üçÄ" )
                database.user_won(first_user_id, game_bet)
                database.user_lose(user_id, game_bet)
                database.game_done(first_user_id, first_user_id, user_id, game_bet)
                database.game_done_del(game_id)
                return is_running


async def stop_timer():
    global is_running
    is_running = False
    return is_running


@dp.message(GetRoomNumberJoin.game_id)
async def game_join_main(message: Message, state: FSMContext):
    second_user_id = message.from_user.id
    player_balance = database.check_balance(second_user_id)
    await state.update_data(game_id=message.text)
    data = await state.get_data()
    if database.check_player_in_game(second_user_id) == True:
        await state.clear()
        return await message.reply("–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∏–≥—Ä–µ –∏–ª–∏ —É –≤–∞—Å —Å–æ–∑–¥–∞–Ω–∞ –∫–æ–º–Ω–∞—Ç–∞")
    if database.game_exists(data["game_id"]) == False:
        await state.clear()
        return await message.reply("–¢–∞–∫–æ–π –∫–æ–º–Ω–∞—Ç—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    if player_balance < database.check_game_bet_amount(data["game_id"]):
        await state.clear()
        return await message.reply("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
    database.game_join(data["game_id"], second_user_id)
    first_user_id = database.check_first_user_id(data["game_id"])
    await bot.send_message(first_user_id, "‚ùó–í –≤–∞—à—É –∫–æ–º–Ω–∞—Ç—É –∑–∞—à–µ–ª –∏–≥—Ä–æ–∫‚ùó\n\n\n \
                         \n\n* 1. –ò–≥—Ä–∞ –¥–ª–∏—Ç—Å—è –ø–æ–∫–∞ –æ–¥–∏–Ω –∏–∑ –∏–≥—Ä–æ–∫–æ–≤ –Ω–µ –Ω–∞–±–µ—Ä–µ—Ç 2 –æ—á–∫–∞. *\
                         \n\n* 2. –í—Ä–µ–º—è –Ω–∞ —Ö–æ–¥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞ - 30 —Å–µ–∫—É–Ω–¥, –ø–æ—Å–ª–µ —á–µ–≥–æ –∏–≥—Ä–æ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç. * \
                         \n\n* 3. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å –∏ —É–≥–∞–¥–∞—Ç—å —á–∏—Å–ª–æ (1-9), –∫–æ—Ç–æ—Ä–æ–µ –≤—ã–ø–∞–¥–µ—Ç –Ω–∞ –∫–æ—Å—Ç–∏ (–µ—ë –∫–∏–¥–∞–µ—Ç –±–æ—Ç). * \
                         \n\n\n‚ùó–ë–æ—Ç —Å–æ–æ–±—â–∏—Ç –æ –≤–∞—à–µ–º —Ö–æ–¥–µ‚ùó")
    await bot.send_message(second_user_id, "‚ùó–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—à–ª–∏ –≤ –∫–æ–º–Ω–∞—Ç—É‚ùó\n\n\n \
                        \n\n* 1. –ò–≥—Ä–∞ –¥–ª–∏—Ç—Å—è –ø–æ–∫–∞ –æ–¥–∏–Ω –∏–∑ –∏–≥—Ä–æ–∫–æ–≤ –Ω–µ –Ω–∞–±–µ—Ä–µ—Ç 2 –æ—á–∫–∞. *\
                        \n\n* 2. –í—Ä–µ–º—è –Ω–∞ —Ö–æ–¥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞ - 30 —Å–µ–∫—É–Ω–¥, –ø–æ—Å–ª–µ —á–µ–≥–æ –∏–≥—Ä–æ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç. * \
                        \n\n* 3. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å –∏ —É–≥–∞–¥–∞—Ç—å —á–∏—Å–ª–æ (1-9), –∫–æ—Ç–æ—Ä–æ–µ –≤—ã–ø–∞–¥–µ—Ç –Ω–∞ –∫–æ—Å—Ç–∏ (–µ—ë –∫–∏–¥–∞–µ—Ç –±–æ—Ç). * \
                        \n\n\n‚ùó–ë–æ—Ç —Å–æ–æ–±—â–∏—Ç –æ –≤–∞—à–µ–º —Ö–æ–¥–µ‚ùó")
    await bot.send_message(first_user_id, "‚ùó–í–∞—à —Ö–æ–¥‚ùó", reply_markup=select_kb)
    game_id = database.get_game_id(first_user_id)
    database.set_turn_id(game_id, first_user_id)
    await state.clear()
    return await start_timer(first_user_id)


@dp.callback_query(F.data == 'choose_num')
async def game_choose_number_fist(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    await state.set_state(ChooseNumber.chosen_number)
    await bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —á–∏—Å–ª–æ ->")


@dp.message(ChooseNumber.chosen_number)
async def game_choose_number(message: Message, state: FSMContext):
    await state.update_data(chosen_number=message.text)
    data = await state.get_data()
    user_msg = data["chosen_number"]
    user_id = message.from_user.id
    if database.check_player_in_active_game(user_id) == False:
        await state.clear()
        return await message.reply("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
    game_id = database.get_game_id(user_id)
    if database.check_which_turn(game_id) != user_id:
        await state.clear()
        return await message.reply("‚ùó–ù–µ –≤–∞—à–∞ –æ—á–µ—Ä–µ–¥—å —Ö–æ–¥–∏—Ç—å‚ùó")
    if int(user_msg) not in [1, 2, 3, 4, 5, 6, 7, 8, 9]:
        await state.clear()
        return await message.reply("‚ùó–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 9‚ùó")
    else:
        await stop_timer()
        game_id = database.get_game_id(user_id)
        user_num_choose = int(user_msg)
        game_bet = database.check_game_bet_amount(game_id)
        msg = await bot.send_dice(user_id)
        await asyncio.sleep(5)
        dice_value = int(msg.dice.value)

        if user_num_choose == dice_value:
            if database.check_which_num_user(user_id) == "first_user_id":
                second_user_id = database.check_second_user_id(game_id)
                database.game_update_score(user_id)
                await bot.send_message(user_id, f"üçÄ–í—ã —É–≥–∞–¥–∞–ª–∏üçÄ, –í–∞—à —Å—á—ë—Ç: {database.game_check_score(user_id)}")
                await bot.send_message(second_user_id, f"üî¥–í–∞—à –æ–ø–ø–æ–Ω–µ–Ω—Ç —É–≥–∞–¥–∞–ªüî¥, –ï–≥–æ —Å—á—ë—Ç: {database.game_check_score(user_id)}")
                if database.check_score_end(user_id) == True:
                    await bot.send_message(user_id, "üçÄ–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏, –∏–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞üçÄ")
                    await bot.send_message(second_user_id,"üî¥–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏, –∏–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞üî¥" )
                    database.user_won(user_id, game_bet)
                    database.user_lose(second_user_id, game_bet)
                    database.game_done(user_id, user_id, second_user_id, game_bet)
                    await state.clear()
                    return database.game_done_del(game_id)
                else:
                    database.set_turn_id(game_id, second_user_id)
                    await state.clear()
                    await bot.send_message(second_user_id, "‚ùó–í–∞—à —Ö–æ–¥‚ùó", reply_markup=select_kb)
                    return await start_timer(second_user_id)
                
            if database.check_which_num_user(user_id) == "second_user_id":
                first_user_id = database.check_first_user_id(game_id)
                database.game_update_score(user_id)
                await bot.send_message(user_id, f"üçÄ–í—ã —É–≥–∞–¥–∞–ª–∏üçÄ, –í–∞—à —Å—á—ë—Ç: {database.game_check_score(user_id)}")
                await bot.send_message(first_user_id, f"üî¥–í–∞—à –æ–ø–ø–æ–Ω–µ–Ω—Ç —É–≥–∞–¥–∞–ªüî¥, –ï–≥–æ —Å—á—ë—Ç: {database.game_check_score(user_id)}")
                if database.check_score_end(user_id) == True:
                    await bot.send_message(user_id, "üçÄ–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏, –∏–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞üçÄ")
                    await bot.send_message(first_user_id,"üî¥–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏, –∏–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞üî¥")
                    database.user_won(user_id, game_bet)
                    database.user_lose(first_user_id, game_bet)
                    database.game_done(user_id, first_user_id, user_id, game_bet)
                    await state.clear()
                    return database.game_done_del(game_id)
                else:
                    database.set_turn_id(game_id, first_user_id)
                    await state.clear()
                    await bot.send_message(first_user_id,"‚ùó–í–∞—à —Ö–æ–¥‚ùó", reply_markup=select_kb)
                    return await start_timer(first_user_id)
        else:
            if database.check_which_num_user(user_id) == "first_user_id":
                second_user_id = database.check_second_user_id(game_id)
                await bot.send_message(user_id, "üî¥–í—ã –Ω–µ —É–≥–∞–¥–∞–ª–∏üî¥")
                await bot.send_message(second_user_id, "üçÄ–í–∞—à –æ–ø–ø–æ–Ω–µ–Ω—Ç –Ω–µ —É–≥–∞–¥–∞–ªüçÄ")
                database.set_turn_id(game_id, second_user_id)
                await state.clear()
                await bot.send_message(second_user_id,"‚ùó–í–∞—à —Ö–æ–¥‚ùó", reply_markup=select_kb)
                return await start_timer(second_user_id)

            if database.check_which_num_user(user_id) == "second_user_id":
                first_user_id = database.check_first_user_id(game_id)
                await bot.send_message(user_id, "üî¥–í—ã –Ω–µ —É–≥–∞–¥–∞–ª–∏üî¥")
                await bot.send_message(first_user_id, "üçÄ–í–∞—à –æ–ø–ø–æ–Ω–µ–Ω—Ç –Ω–µ —É–≥–∞–¥–∞–ªüçÄ")
                database.set_turn_id(game_id, first_user_id)
                await state.clear()
                await bot.send_message(first_user_id,"‚ùó–í–∞—à —Ö–æ–¥‚ùó", reply_markup=select_kb)
                return await start_timer(first_user_id)


@dp.callback_query(F.data == 'show_withdraws')
async def show_withdraws(callback: CallbackQuery):
    user_id = callback.from_user.id
    await callback.answer('–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫')
    await callback.message.edit_text(database.withdraws_get(user_id), reply_markup=profile_kb)


@dp.callback_query(F.data == 'new_game')
async def new_game_first(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    await callback.answer('–û–∂–∏–¥–∞–π—Ç–µ')
    if database.check_player_in_game(user_id):
        return await bot.send_message(user_id, "–í—ã —É–∂–µ —Å–æ–∑–¥–∞–ª–∏ –∫–æ–º–Ω–∞—Ç—É –ª–∏–±–æ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∏–≥—Ä–µ")
    await state.set_state(CreateGame.game_id)
    await bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã –æ—Ç 1 –¥–æ 99 ->")


@dp.message(CreateGame.game_id)
async def new_game_second(message: Message, state: FSMContext):
    await state.update_data(game_id=message.text)
    await state.set_state(CreateGame.bet_amount)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (–º–∏–Ω–∏–º—É–º - 10 —Ä—É–±) ->")


@dp.message(CreateGame.bet_amount)
async def new_game_main(message: Message, state: FSMContext):
    user_id = message.from_user.id
    await state.update_data(bet_amount=message.text)
    data = await state.get_data()
    balance_amount = database.check_balance(user_id)
    if int(data["game_id"]) < 1 or int(data["game_id"]) > 99:
        return await bot.send_message(user_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã")
    if database.game_exists(int(data["game_id"])):
        return await bot.send_message(user_id, "–ö–æ–º–Ω–∞—Ç–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    if int(data["bet_amount"]) < 10 or int(data["bet_amount"]) > balance_amount:
        return await bot.send_message(user_id, "–°—Ç–∞–≤–∫–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∞—è / –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
    database.game_create(int(data["game_id"]), user_id, int(data["bet_amount"]))
    await state.clear()
    return await message.reply("–ö–æ–º–Ω–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
    


@dp.callback_query(F.data == 'balance_deposit')
async def balance_deposit(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    await callback.answer('–ó–∞–≥—Ä—É–∑–∫–∞')
    await state.set_state(MoneyAmount.amount)
    await bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∏–∂–µ')


@dp.message(MoneyAmount.amount)
async def main_balance_deposit(message: Message, state: FSMContext):
    user_id = message.from_user.id
    await state.update_data(amount=message.text)
    data = await state.get_data()
    if int(data["amount"]) < 10:
        await bot.send_message(user_id, "–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 10 —Ä—É–±–ª–µ–π.")
    else:
        label = str(uuid4())
        quickpay = Quickpay(
            receiver = YANDEX_CARD,
            quickpay_form = "shop",
            targets = "–ö—É–±–∏–∫",
            paymentType = "SB",
            sum = int(data["amount"]),
            label = label
        )
        await bot.send_message(user_id, f"–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É (—Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è - 45 —Å–µ–∫—É–Ω–¥): {quickpay.redirected_url}")
        await bot.send_message(user_id, "‚öúÔ∏è–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 2-—É—Ö –º–∏–Ω—É—Ç.")
        await asyncio.sleep(90)
        try:
            history = client.operation_history(label=str(label))
            if history.operations == []:
                await bot.send_message(user_id, "‚öúÔ∏è–°–æ–∂–∞–ª–µ–µ–º –Ω–æ –ø–ª–∞—Ç–µ–∂ –Ω–µ –±—ã–ª –æ–±–Ω–∞—Ä—É–∂–µ–Ω...")
                await state.clear()
            else:
                for operation in history.operations:
                    if operation.status == 'success':
                        database.add_balance(user_id, int(data["amount"]))
                        await bot.send_message(user_id, "‚öúÔ∏è–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω. –ü—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã!")
                        await state.clear()
        except Exception as e:
            print(e)


@dp.callback_query(F.data == 'balance_withdraw')
async def balance_withdraw_first(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    await callback.answer('–ó–∞–≥—Ä—É–∑–∫–∞')
    await state.set_state(MoneyWithdraw.amount)
    await bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞ ->')


@dp.message(MoneyWithdraw.amount)
async def balance_withdraw_second(message: Message, state: FSMContext):
    await state.update_data(amount=message.text)
    await state.set_state(MoneyWithdraw.w_adress)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã(—Ç–µ–ª–µ—Ñ–æ–Ω–∞) –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ ->")


@dp.message(MoneyWithdraw.w_adress)
async def main_balance_withdraw(message: Message, state: FSMContext):
    user_id = message.from_user.id
    await state.update_data(w_adress=message.text)
    data = await state.get_data()
    balance_amount = database.check_balance(user_id)
    if int(data["amount"]) < 50:
        return await bot.send_message(user_id, "–°—É–º–º–∞ –≤—ã–≤–æ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 49 —Ä—É–±–ª–µ–π.")
    if int(data["amount"]) <= balance_amount:
        database.remove_balance(user_id, int(data["amount"]))
        database.withdraw_add(user_id, data["w_adress"], int(data['amount']))
        await message.reply("–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
        await state.clear()


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(filename='logs/logs.log',
            filemode='a',
            format='%(asctime)s,%(msecs)d %(name)s %(levelname)s %(message)s',
            datefmt='%H:%M:%S',
            level=logging.DEBUG)
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print('Done')
